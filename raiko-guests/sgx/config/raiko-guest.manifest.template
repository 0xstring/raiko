# This is Gramine's manifest file.
# To learn more see: https://gramine.readthedocs.io/en/stable/manifest-syntax.html

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "/sgx-guest"
loader.log_level = "{{ log_level }}"
loader.env.HOME = "/root"
loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"
loader.env.RUST_LOG = "info"

fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "/sgx-guest", uri = "file:sgx-guest" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/usr/lib/ssl/certs/", uri = "file:/usr/lib/ssl/certs/" },
  { path = "/tmp", uri = "file:/tmp" },
  { path = "/root/.config/raiko/config", uri = "file:config" },
  # TODO(Brecht): add back encrypted, for some reason it gives an IO error
  { path = "/root/.config/raiko/secrets", uri = "file:secrets" },
  { path = "/input.bin", uri = "file:input.bin" },
  # TODO(Brecht): should only be done in direct mode
  { path = "/dev/attestation/user_report_data", uri = "file:user_report_data" },
  { path = "/dev/attestation/quote", uri = "file:quote" },
  { path = "/dev/attestation/attestation_type", uri = "file:attestation_type" },
]
sys.insecure__allow_eventfd = true
loader.insecure__use_cmdline_argv = true

sgx.debug = false
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '1') == '1' else 'false' }}

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:sgx-guest",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/libgcc_s.so.1",
  "file:{{ arch_libdir }}/libssl.so.3",
  "file:{{ arch_libdir }}/libcrypto.so.3",
  "file:/usr/lib/ssl/certs/",
]
sgx.max_threads = 16
sys.enable_extra_runtime_domain_names_conf = true
sgx.remote_attestation = "dcap"

sgx.allowed_files = [
  "file:/tmp/sgx",
  "file:/root/.config/raiko/config",
]
